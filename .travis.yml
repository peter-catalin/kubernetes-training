# Tell Travis that we want sudo privileges
sudo: required

# Tell Travis that we need docker in order to build
services:
  - docker

env:
  global:
    # We set the git SHA as an environment variable because we need it in order to tag our newly generated images. See deploy.sh
    - SHA=$(git rev-parse HEAD)
    # We tell the Google cloud SKD that it should not issue any prompts when we execute our commands.
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1
before_install:
  # This is the result of encrypting the file with the Travis CLI tool described below in step 3.
  - openssl aes-256-cbc -K $encrypted_0c35eebf403c_key -iv $encrypted_0c35eebf403c_iv -in service-account.json.enc -out service-account.json -d
  # Download and install the Google Cloud SDK
  - curl https://sdk.cloud.google.com | bash > /dev/null;
  - source $HOME/google-cloud-sdk/path.bash.inc
  # Now that the Google Cloud SKD has been installed we now install the kubectl command
  - gcloud components update kubectl
  # Authorize the Google Cloud SDK so that Travis can modify our Kubernetes cluster.
  # In order for this to work we need to do a couple of things.
  # 1. Create a service-account in the Google Cloud Console.
  # 2. Download the .json file generated by step 1.
  # 3. Download the Travis CI CLI tool, encrypt the .json file and upload it to Travis CI.
  - gcloud auth activate-service-account --key-file service-account.json
  # 4. Tell gcloud what project, compute zone and cluster we are trying to use
  - gcloud config set project kubernetes-training-peter
  - gcloud config set compute/zone europe-west1-b
  - gcloud container clusters get-credentials training-cluster
  # 5. Now we need to login into DockerHUB
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  # 6. Now we need to build the image that is going to be used in order to run the tests
  - docker build -t petercatalin/kubernetes-training-react-tests -f ./client/Dockerfile.dev ./client

# Now that our test image is prepared we tell Travis to launch a container and run the tests
script:
  - docker run -e CI=true petercatalin/kubernetes-training-react-tests npm run test

# Once the tests have been successfully passed we need to deploy our code to the Kubernetes cluster.
# Since Travis does not have a deploy script for kubernetes we provide our own in the deploy.sh file
deploy:
  provider: script
  script: bash ./deploy.sh
  on:
    branch: master
